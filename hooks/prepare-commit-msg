#!/bin/bash
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.	
#
# To enable this hook, rename this file to "prepare-.gitmessage.txt".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

if [ -z "$BRANCHES_TO_SKIP" ]; then
  BRANCHES_TO_SKIP=(master develop test)
fi

BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_NAME="${BRANCH_NAME##*/}"

BRANCH_EXCLUDED=$(printf "%s\n" "${BRANCHES_TO_SKIP[@]}" | grep -c "^$BRANCH_NAME$")
BRANCH_IN_COMMIT=$(grep -c "\[$BRANCH_NAME\]" "$1")

#!/bin/bash
if [ -n "$BRANCH_NAME" ] && ! [[ $BRANCH_EXCLUDED -eq 1 ]] && ! [[ $BRANCH_IN_COMMIT -ge 1 ]]; then
echo 'What kind of CHANGE is this? '
exec < /dev/tty
# shellcheck disable=SC2039
CHANGE=("Patch" "Feature" "Breaking" "Quit")
# shellcheck disable=SC2039
  # shellcheck disable=SC1073
  select val in "${CHANGE[@]}"; do
      case $REPLY in
          "1")
            sed -i.bak -e "1s/^/patch(): /" "$1"
            exit
            ;;
          "2")
            sed -i.bak -e "1s/^/feat(): /" "$1"
            exit
            ;;
          "3")
            sed -i.bak -e "1s/^/perf(): /" "$1"
            exit
            break
              ;;
          "4")
            echo "User requested exit"
            exit
            ;;
          *) echo "invalid option $REPLY";;
      esac
  done
fi
